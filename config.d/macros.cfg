# ---------- Start and End Gcodes -----------------------

# HOME_IF_NEEDED will home the machine if it hasn't been homed, and run Z_TILT_ADJUST
# Saves a lot of time if the machine hasn't been turned off between prints
[gcode_macro HOME_IF_NEEDED]
gcode:
  {% if printer.toolhead.homed_axes == "xyz" %}
    M118 Printer already homed
  {% else %}
    M118 Homing
    G28
    Z_TILT_ADJUST
    # Home Z again in case tilt adjust threw it off
    G28 Z
  {% endif %}

[gcode_macro HEAT_AND_CLEAN_NOZZLE]
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  G90 ; absolute coordinates
  M83 ; relative coords for extruder
  G0 Z15 ; move bed down
  G0 X340 Y70 ; move past the end of the brush

  # Heat extruder
  M117 Heating extruder
  SET_WLED RED=1 BLUE=0 GREEN=0
  M109 S{EXTRUDER_TEMP}
  SET_WLED RED=1 BLUE=1 GREEN=1

  M117 Cleaning nozzle
  G0 Z2 ; move bed up to reach brush
  G1 E15 F1500 ; extrude 15mm of filament
  G92 E0 ; reset extruder position
  G0 Y30 ; run extruder over brush a few times
  G0 Y70
  G0 Y30
  G0 Y70
  G0 Z15 ; move extruder back over build surface
  G0 X165 Y5 F6000

# Run bed probing only for the area we are actually printing to.
# From https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 1
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}
            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}


[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  G90 ; absolute coords
  M83 ; relative extruder coords

  # Heat up bed, start heating extruder
  M117 Heating bed
  SET_WLED RED=1 BLUE=0 GREEN=0
  #M104 S{EXTRUDER_TEMP-40}
  M190 S{BED_TEMP}

  # Home and bed leveling
  M117 Homing
  SET_WLED RED=0 BLUE=1 GREEN=0
  # Isues with some edge cases of HOME_IF_NEEDED, disable for now and always home
  #HOME_IF_NEEDED
  G28
  Z_TILT_ADJUST
  # Home Z again in case tilt adjust threw it off
  G28 Z

  M117 Bed Mesh {params.AREA_START} {params.AREA_END}
  BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}

  # Finish heating extruder and clean nozzle
  HEAT_AND_CLEAN_NOZZLE EXTRUDER_TEMP={EXTRUDER_TEMP}
  SET_WLED RED=1 BLUE=1 GREEN=1
  M117 Printing

[gcode_macro END_PRINT]
gcode:
  {% set z_max = printer.toolhead.axis_maximum.z %}
  {% set z_pos = printer.toolhead.position.z %}
  {% set park_height = 200 %}

  G4 ; wait for buffer to clear
  G90 E0 ; reset extruder position
  G1 E-4 F1000 ; retract slightly
  G1 E-4 F1500 ; retract more

  # Move Z down if it's safe to do so
  {% if z_pos > (z_max - 20) %} ; Already within 20mm of max bed lowering
    M117 Z {z_pos} Cant lower bed
  {% elif z_pos > park_height %} ; Lower than park height but more than 20mm above lowest position
    G1 Z{z_pos + 10} ; Move bed down 10mm
  {% else %} ; Z_pos is above desired height
    G1 Z{park_height}
  {% endif %}

  # Move extruder out of the way
  {% set X_MIN = printer.toolhead.axis_minimum.x|default(330)|float %}
  {% set Y_MAX = printer.toolhead.axis_maximum.y|default(330)|float %}
  G1 Y {Y_MAX - 10} X {X_MIN + 10} F3000

  M104 S0 ; turn off extruder heat
  M140 S0 ; turn off bed heat
  



# ------------ Backup config to git --------------------
[gcode_shell_command backup_cfg]
command: ~pi/klipper_config/backup.sh
timeout: 60.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
	RUN_SHELL_COMMAND CMD=backup_cfg


# ----------- LED Control ----------------------
[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset
gcode:
  {% set strip = params.STRIP|default("front_leds")|string %}
  {% set preset = params.PRESET|default(1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|default("front_leds")|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro SET_WLED]
description: SET_LED like functionlity for WLED
gcode:
    {% set strip = params.STRIP|default("front_leds")|string %}
    {% set red = params.RED|default(1)|float %}
    {% set green = params.GREEN|default(1)|float %}
    {% set blue = params.BLUE|default(1)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}


# ----------- Marlin Compatible Gcode commands -------------------
[gcode_macro M76]
gcode:
	PAUSE
[gcode_macro G27]
gcode:
	PARK
[gcode_macro M125]
gcode:
	PARK

# M118 and RESPOND
[respond]

[gcode_macro M701]
gcode:
	LOAD_FILAMENT

[gcode_macro M702]
gcode:
	UNLOAD_FILAMENT

# Enable G10 (retract) and G11(unretract) GCODE commands.
# Enable "Use firmware retraction" in slicer to use these settings
[firmware_retraction]
retract_length: 7
retract_speed: 20
unretract_extra_length: 0
unretract_speed: 10

# G2/G3 arc support
[gcode_arcs]
resolution: 1.0

# Override M117 to also show in console
[gcode_macro M117]
rename_existing: M117.1
gcode:
  M117.1 {rawparams}
  {action_respond_info(rawparams)}



# ----------- Pause Resume Cancel ----------

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z10 F600
  M84

# ----------- Filament load/unload/change and parking -------------------

[gcode_macro PARK]
gcode:
    SAVE_GCODE_STATE NAME=PARK_STATE
	{% set X = params.X|default(340)|float %}
	{% set Y = params.Y|default(80)|float %}
	{% set Z = params.Z|default(10)|float %}
	G91 ; relative moves
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
    RESTORE_GCODE_STATE NAME=PARK_STATE MOVE=0

[gcode_macro LOW_TEMP_CHECK]
gcode:
	{% if printer.extruder.temperature|int > 180 %}
		M118 Printer already heated
	{% else %}
		M118 Heating extruder to 190C
		M109 S190
	{% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
	PARK
	LOW_TEMP_CHECK
	M83 ; Extruder relative mode
	G92 E0.0 ; Zero filament length

	; Bowden tube is about 900mm long. Max extrude length is 300mm at a time.
	; load 800mm rapidly (40mm/s), then 200mm slowly (20mm/s)
	G1 E300 F2400
	G1 E300 F2400
	G1 E200 F2400
	G1 E200 F1200 ; load more, slowly
	G92 E0.0

[gcode_macro UNLOAD_FILAMENT]
gcode:
	PARK
	LOW_TEMP_CHECK
	M83
	G1 E0.5 F1000  ; Push filament in and out a bit before retracting all the way. Not sure why, just copied someone else's example
	G1 E-0.5 F1000
	G1 E1.0 F1000
	G1 E-1.0 F1000
	G1 E1.5 F1000
	G1 E-1.5 F1000
	G1 E2.0 F1000
	G1 E-300 F2400 ; 40mm/s
	G1 E-300 F2400
	G1 E-300 F2400
	G1 E-50 F2400 ; should be right out of the extruder by now
	G92 E0.0


