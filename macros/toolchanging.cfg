# These macros control my 2 in, 1 out hotend. It has 2 bowden tubes that meet in a Y shape, so only one filament can be inserted at a time. It's a pretty cheap and effective way to add dual extrusion.
# However, you need to remember what extruder is loaded, and manage retracting the filament back into the bowden tube to load the other one. Some deal with this by making sure both filaments are retracted
# at the end of a print, but that fails if a print doesn't finish, and causes unnecessary swapping. So I manage it by keeping track of the loaded filament at all times.
# In addition, I have a few extra features I've added.
#
# How it all works:
#
# The currently loaded extruder is saved to a variables file on disk. This way it is remembered even after a restart. Pretty much everything that deals with swapping extruders calls SET_LOADED_EXTRUDER first. This reads the variable from disk and sets it as the loaded extruder.
# Because of the way macros are evaluated, even though it sets the active extruder, the rest of that macro won't see the change that was just made. So the T0 and T1 macros just do that and then call their real macro which will see the changes.
#
# FORCE_T0 and FORCE_T1 will set the active tool, ignoring what was saved. This can be used if something has gone wrong or you've manually loaded the filaments.
#
# SWITCH_EXTRUDER just switches to whichever tool isn't active.
#
# _UNLOAD_HOTEND is responsible for pulling filament out of the hotend into the bowden tube. It wiggles it in and out a bit to try to avoid strings that could jam things up. The lengths will need tuning for each printer.
# _RELOAD_HOTEND pushes the new filament in and primes the nozzle. My printer allows the extruder to go past the edge of the print surface, so I have a spot where filament can drop down and be wiped away with a wire brush.
#
# T0 and T1 switch to their respective extruders, and also make sure the correct filament runout sensor is enabled.
#
# In superslicer, the printer is configured as having 2 extruders. Tool change gcode is set to "T[next_extruder]". The macros handle all of the purging and wiping, so no purge towers are required and the slicer doesn't do anything besides call T0 or T1.
#
# Extra magic:
#
# start_print.cfg has the start gcode. It makes sure the correct tool is loaded right at the start of the print, because my start gcode in Superslicer specifies which extruder is being used first.
#
# ../hardware/fakegpio.cfg has two output_pin settings, "Disable_Tool_Changes" and "Swap_Extruder_On_Runout". These aren't actually connected to anything, and use otherwise unused pins on the board. They are just there to create a toggle switch in the Misc section of Mainsail so I can turn them on and off.
# Disable_Tool_Changes will make Klipper ignore any T0 or T1 commands. I use this when I want to reprint the same item in several colors without having to reslice it, or if I forgot to specify an extruder to use and it defaults to T0 but I want it on T1.
# Swap_Extruder_On_Runout takes advantage of the dual filament sensors. For prints where I don't care what color they are in, I can use up the last of a roll of filament by starting with an almost empty spool, and a fresh(er) spool loaded in the other extruder.
# When a filament runout is detected, it will switch automatically to the other extruder and continue the print. That also CLEARS that setting, so if the second spool runs out it will pause and wait for manual intervention.
# The macro for that is in runout.cfg

[gcode_macro SET_LOADED_EXTRUDER]
description: Read active extruder from saved variables and swap to it
gcode:

  # Enable the saved extruder
  {% set svv = printer.save_variables.variables %}
  {% if printer.toolhead.extruder != svv.currentextruder %}
    ACTIVATE_EXTRUDER extruder={svv.currentextruder}
  {% endif %}

  # Enable the appropriate filament sensor
  {% if svv.currentextruder == "extruder" %}
    SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=extruder1_sensor ENABLE=0
  {% else %}
    SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=extruder1_sensor ENABLE=1
  {% endif %}

[gcode_macro FORCE_T0]
description: Tell printer T0 is loaded, ignoring existing settings. Use if you manually swapped filaments.
gcode:
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'
  SET_LOADED_EXTRUDER

[gcode_macro FORCE_T1]
description: Tell printer T1 is loaded, ignoring existing settings. Use if you manually swapped filaments.
gcode:
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder1"'
  SET_LOADED_EXTRUDER

[gcode_macro SWITCH_EXTRUDER]
description: Switch to whichever extruder isn't currently active
gcode:
  SET_LOADED_EXTRUDER
  _SWITCH_EXTRUDER

[gcode_macro _SWITCH_EXTRUDER]
description: Do not call directly
gcode:
  {% if printer.toolhead.extruder == "extruder" %}
    T1
  {% elif printer.toolhead.extruder == "extruder1" %}
    T0
  {% else %}
    M117 SWITCH_EXTRUDER Failed - unsure which extruder is currently loaded
  {% endif %}


# Done as separate macros since macros only see the initial state of the machine when they are first run, and we need to change that state during the macro and compare.
[gcode_macro T0]
description: Switch to first extruder
gcode:
  SET_LOADED_EXTRUDER
  _SWAPTO_T0

[gcode_macro T1]
description: Switch to second extruder
gcode:
  SET_LOADED_EXTRUDER
  _SWAPTO_T1

[gcode_macro _SWAPTO_T0]
gcode:
  {% if printer.toolhead.extruder == "extruder" %}
    M117 Extruder0 already active
  {% else %}
    {% if printer['output_pin Disable_Tool_Changes'].value == 1 %}
      M117 T0 Ignored - Tool changing is disabled.
    {% else %}
      {% if printer.extruder.temperature < 170 %}
        M117 T0 Failed - Heat extruder first!
      {% else %}
        M117 Swapping to extruder0
        SAVE_GCODE_STATE NAME=TOOLCHANGE
        G10 ; retract
        PARK
        _UNLOAD_HOTEND
        ACTIVATE_EXTRUDER extruder=extruder ; switch to other extruder
        _RELOAD_HOTEND  
        SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"' ; save variable to disk so we know which extruder was loaded
        RESTORE_GCODE_STATE NAME=TOOLCHANGE MOVE=1 MOVE_SPEED=100
        SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=1
        SET_FILAMENT_SENSOR SENSOR=extruder1_sensor ENABLE=0
      {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro _SWAPTO_T1]
# Prepare extruder
gcode:
  {% if printer.toolhead.extruder == "extruder1" %}
    M117 Extruder1 already active
  {% else %}
    {% if printer['output_pin Disable_Tool_Changes'].value == 1 %}
      M117 T1 Ignored - Tool changing is disabled.
    {% else %}
      {% if printer.extruder.temperature < 170 %}
        M117 T1 Failed - Heat extruder first!
      {% else %}
        M117 Swapping to extruder1
        SAVE_GCODE_STATE NAME=TOOLCHANGE
        G10 ; retract
        PARK
        _UNLOAD_HOTEND
        ACTIVATE_EXTRUDER extruder=extruder1 ; switch to other extruder
        _RELOAD_HOTEND  
        SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder1"' ; save variable to disk so we know which extruder was loaded
        RESTORE_GCODE_STATE NAME=TOOLCHANGE MOVE=1 MOVE_SPEED=100
        SET_FILAMENT_SENSOR SENSOR=extruder_sensor ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=extruder1_sensor ENABLE=1
      {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro _UNLOAD_HOTEND]
gcode:
  M117 Unloading hotend
  # Retraction
  M83 ; relative extruder
  G1 E-15.0 F2000 ; retract filament
  G4 P600 ; wait for retracted filament to cool
  G1 E13 F2000 ; pack filament back in to eliminate tail
  G1 E-13 F2000 ; retract again
  G4 P1000
  G1 E-90 F2500
  
[gcode_macro _RELOAD_HOTEND]
gcode:
  M117 Reloading hotend
  # Insertion
  M83 ; relative extruder
  G1 E75 F2000 ; push part way to hotend
  G1 E25 F300 ; push rest of way
  G1 E20 F300 ; extrude a bit more to make sure it's primed
  PURGE COUNT=3 ; purge 40mm of filament

